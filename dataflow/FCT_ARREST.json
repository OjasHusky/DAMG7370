{
	"name": "FCT_ARREST",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowFlakeNYPD",
						"type": "DatasetReference"
					},
					"name": "sourceSTG"
				},
				{
					"dataset": {
						"referenceName": "DIM_JURISD",
						"type": "DatasetReference"
					},
					"name": "sourceJuris"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeNYLOC",
						"type": "DatasetReference"
					},
					"name": "sourceLoc"
				},
				{
					"dataset": {
						"referenceName": "SnowflakePerp",
						"type": "DatasetReference"
					},
					"name": "sourcePerp"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeDimOffense",
						"type": "DatasetReference"
					},
					"name": "sourceOffense"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeDimLaw",
						"type": "DatasetReference"
					},
					"name": "sourceLaw"
				},
				{
					"dataset": {
						"referenceName": "SnowflakePrecinct",
						"type": "DatasetReference"
					},
					"name": "sourcePrecinct"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeFctArrest",
						"type": "DatasetReference"
					},
					"name": "maxArrestSK"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeDimDate",
						"type": "DatasetReference"
					},
					"name": "sourceDate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeFctArrest",
						"type": "DatasetReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "joinJuris"
				},
				{
					"name": "joinLaw"
				},
				{
					"name": "joinLoc"
				},
				{
					"name": "joinOffense"
				},
				{
					"name": "joinPerp"
				},
				{
					"name": "joinPrecinct"
				},
				{
					"name": "derivedColumns"
				},
				{
					"name": "joinMaxArrestSK"
				},
				{
					"name": "surrogateKey"
				},
				{
					"name": "derivedColumnPreci"
				},
				{
					"name": "joinDate"
				},
				{
					"name": "select1"
				},
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				}
			],
			"scriptLines": [
				"parameters{",
				"     job_id as string ('10')",
				"}",
				"source(output(",
				"          ARREST_KEY as string,",
				"          ARREST_DATE as string,",
				"          PD_CD as string,",
				"          PD_DESC as string,",
				"          OFNS_DESC as string,",
				"          LAW_CODE as string,",
				"          LAW_CAT_CD as string,",
				"          ARREST_BORO as string,",
				"          ARREST_PRECINCT as string,",
				"          JURISDICTION_CODE as string,",
				"          JURISDICTION_DESC as string,",
				"          AGE_GROUP as string,",
				"          PERP_SEX as string,",
				"          PERP_RACE as string,",
				"          X_COORD_CD as string,",
				"          Y_COORD_CD as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceSTG",
				"source(output(",
				"          JURISDICTION_SK as string,",
				"          JURISDICTION_CODE as string,",
				"          JURISDICTION_DESC as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceJuris",
				"source(output(",
				"          LOCATION_SK as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          X_COORD_CD as string,",
				"          Y_COORD_CD as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLoc",
				"source(output(",
				"          PERPETRATOR_SK as decimal(10,0),",
				"          AGE_GROUP as string,",
				"          PERP_SEX as string,",
				"          PERP_RACE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourcePerp",
				"source(output(",
				"          OFFENSE_SK as string,",
				"          PD_CD as string,",
				"          PD_DESC as string,",
				"          OFNS_DESC as string,",
				"          ACTIVE_FLAG as string,",
				"          START_DATE as string,",
				"          END_DATE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceOffense",
				"source(output(",
				"          LAW_SK as string,",
				"          LAW_DK as string,",
				"          LAW_CODE as string,",
				"          LAW_CAT_CD as string,",
				"          START_DATE as string,",
				"          STOP_DATE as string,",
				"          ACTIVE_FLAG as string,",
				"          DI_JOB_ID as string,",
				"          DI_JOB_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLaw",
				"source(output(",
				"          PRECINCT_SK as string,",
				"          ARREST_PRECINCT_ID as string,",
				"          ARREST_PRECINCT_DK as string,",
				"          BOROUGH as string,",
				"          START_DATE as string,",
				"          STOP_DATE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourcePrecinct",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'Select NVL(max(ARREST_SK),0) as mxArrestSK from FACT_ARREST',",
				"     format: 'query') ~> maxArrestSK",
				"source(output(",
				"          DT as string,",
				"          ABRV_DAY_NAME as string,",
				"          MONTH_NAME as string,",
				"          START_DAY_OF_MONTH as string,",
				"          END_DAY_OF_MONTH as string,",
				"          QUARTER_NUM as string,",
				"          DAY_OF_WEEK as string,",
				"          IS_WEEKEND as string,",
				"          YEAR_NUM as string,",
				"          MONTH_NUM as string,",
				"          DAY_NUM as string,",
				"          DATE_DIM_SK as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDate",
				"sourceSTG, sourceJuris join(sourceSTG@JURISDICTION_CODE == sourceJuris@JURISDICTION_CODE",
				"     && sourceSTG@JURISDICTION_DESC == sourceJuris@JURISDICTION_DESC,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinJuris",
				"joinJuris, sourceLaw join(sourceSTG@LAW_CODE == sourceLaw@LAW_CODE",
				"     && sourceSTG@LAW_CAT_CD == sourceLaw@LAW_CAT_CD,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLaw",
				"joinLaw, sourceLoc join(sourceSTG@X_COORD_CD == sourceLoc@X_COORD_CD",
				"     && sourceSTG@Y_COORD_CD == sourceLoc@Y_COORD_CD",
				"     && sourceSTG@LATITUDE == sourceLoc@LATITUDE",
				"     && sourceSTG@LONGITUDE == sourceLoc@LONGITUDE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLoc",
				"joinLoc, sourceOffense join(sourceSTG@PD_CD == sourceOffense@PD_CD",
				"     && sourceSTG@PD_DESC == sourceOffense@PD_DESC",
				"     && sourceSTG@OFNS_DESC == sourceOffense@OFNS_DESC,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinOffense",
				"joinOffense, sourcePerp join(sourceSTG@AGE_GROUP == sourcePerp@AGE_GROUP",
				"     && sourceSTG@PERP_SEX == sourcePerp@PERP_SEX",
				"     && sourceSTG@PERP_RACE == sourcePerp@PERP_RACE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPerp",
				"joinPerp, derivedColumnPreci join(ARREST_PRECINCT == ARREST_PRECINCT_ID",
				"     && ARREST_BORO == BOROUGH,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPrecinct",
				"surrogateKey derive(di_job_id = $job_id,",
				"          di_load_dt = currentTimestamp(),",
				"          Arrest_SK = toInteger(MXARRESTSK+Row_Num)) ~> derivedColumns",
				"joinDate, maxArrestSK join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMaxArrestSK",
				"select1 keyGenerate(output(Row_Num as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"sourcePrecinct derive(BOROUGH = iif(BOROUGH == 'Bronx', 'B',\r",
				"    iif(BOROUGH == 'Staten Island', 'S',\r",
				"        iif(BOROUGH == 'Brooklyn', 'K',\r",
				"            iif(BOROUGH == 'Manhattan', 'M',\r",
				"                iif(BOROUGH == 'Queens', 'Q', 'Unknown')\r",
				"            )\r",
				"        )\r",
				"    )\r",
				")) ~> derivedColumnPreci",
				"joinPrecinct, sourceDate join(ARREST_DATE == DT,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDate",
				"MapDrifted1 select(mapColumn(",
				"          ARREST_KEY,",
				"          LOCATION_SK,",
				"          PRECINCT_SK,",
				"          OFFENSE_SK,",
				"          LAW_SK,",
				"          JURISDICTION_SK,",
				"          PERPETRATOR_SK,",
				"          DATE_DIM_SK,",
				"          MXARRESTSK",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"joinMaxArrestSK derive(MXARRESTSK = toDecimal(byName('MXARRESTSK'))) ~> MapDrifted1",
				"derivedColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ARREST_SK as string,",
				"          ARREST_KEY as string,",
				"          LOCATION_SK as string,",
				"          PRECINCT_SK as string,",
				"          OFFENSE_SK as string,",
				"          LAW_SK as string,",
				"          JURISDICTION_SK as string,",
				"          PERPETRATOR_SK as string,",
				"          DATE_SK as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          ARREST_KEY,",
				"          LOCATION_SK,",
				"          PRECINCT_SK,",
				"          OFFENSE_SK,",
				"          LAW_SK,",
				"          JURISDICTION_SK,",
				"          PERPETRATOR_SK,",
				"          DATE_SK = DATE_DIM_SK,",
				"          DI_JOB_ID = di_job_id,",
				"          DI_LOAD_DT = di_load_dt",
				"     )) ~> sink"
			]
		}
	}
}