{
	"name": "FCT_LOAD_flow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeSTG_DataFlow",
						"type": "DatasetReference"
					},
					"name": "sourceSTG"
				},
				{
					"dataset": {
						"referenceName": "dim_location",
						"type": "DatasetReference"
					},
					"name": "sourceLoc"
				},
				{
					"dataset": {
						"referenceName": "DIM_BREED",
						"type": "DatasetReference"
					},
					"name": "sourceBreed"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableDIMDate",
						"type": "DatasetReference"
					},
					"name": "sourceDate"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableFct",
						"type": "DatasetReference"
					},
					"name": "MaxFctSK"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTableFct",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinLoc"
				},
				{
					"name": "joinBreed"
				},
				{
					"name": "surrogateKey"
				},
				{
					"name": "joinDate"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregatedCols"
				},
				{
					"name": "joinMxSK"
				},
				{
					"name": "filterLoc"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				}
			],
			"scriptLines": [
				"parameters{",
				"     job_id as string ('01')",
				"}",
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceSTG",
				"source(output(",
				"          LOCATION_SK as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          STATE_ABBR as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceLoc",
				"source(output(",
				"          BREED_SK as string,",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDARY_BREED_NAME as string,",
				"          START_DT as string,",
				"          END_DT as string,",
				"          IS_CURRENT as string,",
				"          BREED_DK as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceBreed",
				"source(output(",
				"          DT as string,",
				"          ABRV_DAY_NAME as string,",
				"          MONTH_NAME as string,",
				"          START_DAY_OF_MONTH as string,",
				"          END_DAY_OF_MONTH as string,",
				"          QUARTER_NUM as string,",
				"          DAY_OF_WEEK as string,",
				"          IS_WEEKEND as string,",
				"          YEAR_NUM as string,",
				"          MONTH_NUM as string,",
				"          DAY_NUM as string,",
				"          DATE_DIM_SK as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourceDate",
				"source(output(",
				"          MXPETLICENSESK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'Select NVL(max(pet_lic_sk),0) as mxPetLicenseSK from FCT_PET_LIC',",
				"     format: 'query') ~> MaxFctSK",
				"derivedColumn2, filterLoc join(derivedColumn2@ZIP_CODE == sourceLoc@ZIP_CODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinLoc",
				"joinLoc, sourceBreed join(SPECIES == SPECIES_NAME",
				"     && PRIMARY_BREED == PRIMARY_BREED_NAME",
				"     && SECONDARY_BREED == SECONDARY_BREED_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBreed",
				"derivedColumn1 keyGenerate(output(Row_Count as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"joinBreed, sourceDate join(LICENSE_ISSUE_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDate",
				"aggregatedCols derive(di_job_id = $job_id,",
				"          di_load_dt = currentTimestamp(),",
				"          pet_lic_sk = toInteger(MXPETLICENSESK+Row_Count)) ~> derivedColumn1",
				"joinMxSK aggregate(groupBy(LOCATION_SK,",
				"          BREED_SK,",
				"          DATE_DIM_SK,",
				"          MXPETLICENSESK,",
				"          LICENSE_NUMBER),",
				"     Row_Count = count(LICENSE_NUMBER)) ~> aggregatedCols",
				"joinDate, MaxFctSK join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMxSK",
				"derivedColumn3 filter(STATE != '') ~> filterLoc",
				"sourceSTG derive(ZIP_CODE = iif(isNull(ZIP_CODE), '', ZIP_CODE),",
				"          SPECIES = iif(isNull(SPECIES), '', SPECIES),",
				"          SECONDARY_BREED = iif(isNull(SECONDARY_BREED), '', SECONDARY_BREED)) ~> derivedColumn2",
				"sourceLoc derive(STATE = iif(STATE != 'Washington', '', STATE)) ~> derivedColumn3",
				"surrogateKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PET_LIC_SK as string,",
				"          LOCATION_SK as string,",
				"          ISSUE_DATE_SK as string,",
				"          BREED_SK as string,",
				"          LIC_NUM as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          PET_LIC_SK = pet_lic_sk,",
				"          LOCATION_SK,",
				"          ISSUE_DATE_SK = DATE_DIM_SK,",
				"          BREED_SK,",
				"          DI_JOB_ID = di_job_id,",
				"          DI_LOAD_DT = di_load_dt,",
				"          LIC_NUM = LICENSE_NUMBER",
				"     )) ~> sink1"
			]
		}
	}
}