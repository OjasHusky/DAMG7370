{
	"name": "Csv_to_Stg",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "readCSV"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeSTG_DataFlow",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     di_job_id as string ('01')",
				"}",
				"source(output(",
				"          License_Issue_Date as string,",
				"          License_Number as string,",
				"          {Animal's_Name} as string,",
				"          Species as string,",
				"          Primary_Breed as string,",
				"          Secondary_Breed as string,",
				"          ZIP_Code as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> readCSV",
				"readCSV derive(License_Issue_Date = toDate((License_Issue_Date),'MMMM dd yyyy'),",
				"          Secondary_Breed = upper(Secondary_Breed),",
				"          Species = upper(Species),",
				"          {Animal's_Name} = translate({Animal's_Name}, '[]()', \"\"),",
				"          ZIP_Code = lpad(toString(ZIP_Code),5,'0'),",
				"          License_Number = toInteger(translate(License_Number, 'S', '')),",
				"          DI_JOB_ID = $di_job_id,",
				"          DI_LOAD_DT = currentDate()) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          License_Issue_Date,",
				"          License_Number,",
				"          {Animal's_Name},",
				"          Species,",
				"          Primary_Breed,",
				"          Secondary_Breed,",
				"          ZIP_Code,",
				"          DI_JOB_ID,",
				"          DI_JOB_DT = DI_LOAD_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          LICENSE_ISSUE_DATE = License_Issue_Date,",
				"          LICENSE_NUMBER = License_Number,",
				"          ANIMAL_NAME = {Animal's_Name},",
				"          SPECIES = Species,",
				"          PRIMARY_BREED = Primary_Breed,",
				"          SECONDARY_BREED = Secondary_Breed,",
				"          ZIP_CODE = ZIP_Code,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT = DI_JOB_DT",
				"     )) ~> sink1"
			]
		}
	}
}